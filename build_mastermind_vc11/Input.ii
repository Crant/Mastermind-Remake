# 1 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.cpp"
# 1 "<command-line>"
# 1 "e:/Documents/GitHub/Marmelade/Mastermind/build_mastermind_vc11/temp_defines_release.h" 1
# 1 "<command-line>" 2
# 1 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.cpp"
# 1 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.h" 1
       

# 1 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h" 1
# 15 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
# 1 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h" 1
# 35 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 49 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
  typedef signed long long s3e_int64_t;
  typedef unsigned long long s3e_uint64_t;
# 62 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 84 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 96 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;


typedef int64_t int64;
typedef uint64_t uint64;




typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 207 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 225 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 237 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h" 2
# 55 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
typedef enum s3ePointerType
{
    S3E_POINTER_TYPE_INVALID = 0,
    S3E_POINTER_TYPE_MOUSE = 1,
    S3E_POINTER_TYPE_STYLUS = 2
} s3ePointerType;







typedef enum s3eStylusType
{
    S3E_STYLUS_TYPE_INVALID = 0,
    S3E_STYLUS_TYPE_STYLUS = 1,
    S3E_STYLUS_TYPE_FINGER = 2
} s3eStylusType;
# 86 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
typedef enum s3ePointerProperty
{



    S3E_POINTER_AVAILABLE = 0,






    S3E_POINTER_HIDE_CURSOR = 1,




    S3E_POINTER_TYPE = 2,




    S3E_POINTER_STYLUS_TYPE = 3,




    S3E_POINTER_MULTI_TOUCH_AVAILABLE = 4,







    S3E_POINTER_VIRTUAL_TRANSFORM = 5,




    S3E_POINTER_VIRTUAL_ROTATION = 6,




    S3E_POINTER_VIRTUAL_LEFT = 7,




    S3E_POINTER_VIRTUAL_TOP = 8,




    S3E_POINTER_VIRTUAL_WIDTH = 9,




    S3E_POINTER_VIRTUAL_HEIGHT = 10,





    S3E_POINTER_VIRTUAL_SCALE_X = 11,





    S3E_POINTER_VIRTUAL_SCALE_Y = 12

} s3ePointerProperty;
# 174 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetInt(s3ePointerProperty property);
# 191 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerSetInt(s3ePointerProperty property, int32 value);
# 200 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
typedef enum s3ePointerCallback
{
# 213 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
    S3E_POINTER_BUTTON_EVENT,
# 226 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
    S3E_POINTER_MOTION_EVENT,
# 237 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
    S3E_POINTER_TOUCH_EVENT,
# 248 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
    S3E_POINTER_TOUCH_MOTION_EVENT,
# 263 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
    S3E_POINTER_WHEEL_CHANGED_EVENT,

    S3E_POINTER_CALLBACK_MAX
} s3ePointerCallback;
# 288 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerRegister(s3ePointerCallback cbid, s3eCallback fn, void* userData);
# 305 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerUnRegister(s3ePointerCallback cbid, s3eCallback fn);
# 314 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
typedef enum s3ePointerError
{
    S3E_POINTER_ERR_NONE = 0,
    S3E_POINTER_ERR_PARAM = 1,
    S3E_POINTER_ERR_TOO_MANY = 2,
    S3E_POINTER_ERR_ALREADY_REG = 3,
    S3E_POINTER_ERR_NOT_FOUND = 4,
    S3E_POINTER_ERR_UNAVAIL = 5
} s3ePointerError;







extern "C" s3ePointerError s3ePointerGetError();







extern "C" const char* s3ePointerGetErrorString();






typedef enum s3ePointerState
{
    S3E_POINTER_STATE_UP = 0,
    S3E_POINTER_STATE_DOWN = 1,
    S3E_POINTER_STATE_PRESSED = 2,
    S3E_POINTER_STATE_RELEASED = 4,
    S3E_POINTER_STATE_UNKNOWN
} s3ePointerState;






typedef enum s3ePointerButton
{

    S3E_POINTER_BUTTON_SELECT = 0,


    S3E_POINTER_BUTTON_LEFTMOUSE = 0,


    S3E_POINTER_BUTTON_RIGHTMOUSE = 1,


    S3E_POINTER_BUTTON_MIDDLEMOUSE = 2,


    S3E_POINTER_BUTTON_MOUSEWHEELUP = 3,


    S3E_POINTER_BUTTON_MOUSEWHEELDOWN = 4,


    S3E_POINTER_BUTTON_MAX
} s3ePointerButton;




typedef struct s3ePointerEvent
{

    s3ePointerButton m_Button;

    uint32 m_Pressed;

    int32 m_x;

    int32 m_y;
} s3ePointerEvent;




typedef struct s3ePointerMotionEvent
{

    int32 m_x;

    int32 m_y;
} s3ePointerMotionEvent;




typedef struct s3ePointerTouchEvent
{





    uint32 m_TouchID;

    uint32 m_Pressed;

    int32 m_x;

    int32 m_y;
} s3ePointerTouchEvent;




typedef struct s3ePointerTouchMotionEvent
{





    uint32 m_TouchID;

    int32 m_x;

    int32 m_y;
} s3ePointerTouchMotionEvent;
# 452 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
typedef struct s3ePointerWheelChangedEvent
{

    int32 m_WheelDelta;
} s3ePointerWheelChangedEvent;






extern "C" s3ePointerState s3ePointerGetState(s3ePointerButton button);






extern "C" int32 s3ePointerGetX();






extern "C" int32 s3ePointerGetY();
# 488 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
extern "C" s3ePointerState s3ePointerGetTouchState(uint32 touchID);
# 500 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetTouchX(uint32 touchID);
# 512 "e:/program files (x86)/marmelade/7.4/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetTouchY(uint32 touchID);







extern "C" s3eResult s3ePointerUpdate();
# 4 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.h" 2
# 1 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h" 1
# 64 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
typedef enum s3eKey
{
    s3eKeyFirst = 0,

    s3eKeyEsc = 1,
    s3eKeyTab = 2,
    s3eKeyBackspace = 3,
    s3eKeyEnter = 4,
    s3eKeyLeftShift = 5,
    s3eKeyLeftControl = 6,
    s3eKeyReserved = 7,
    s3eKeySpace = 8,
    s3eKeyLeft = 9,
    s3eKeyUp = 10,
    s3eKeyRight = 11,
    s3eKeyDown = 12,
    s3eKey0 = 13,
    s3eKey1 = 14,
    s3eKey2 = 15,
    s3eKey3 = 16,
    s3eKey4 = 17,
    s3eKey5 = 18,
    s3eKey6 = 19,
    s3eKey7 = 20,
    s3eKey8 = 21,
    s3eKey9 = 22,
    s3eKeyA = 23,
    s3eKeyB = 24,
    s3eKeyC = 25,
    s3eKeyD = 26,
    s3eKeyE = 27,
    s3eKeyF = 28,
    s3eKeyG = 29,
    s3eKeyH = 30,
    s3eKeyI = 31,
    s3eKeyJ = 32,
    s3eKeyK = 33,
    s3eKeyL = 34,
    s3eKeyM = 35,
    s3eKeyN = 36,
    s3eKeyO = 37,
    s3eKeyP = 38,
    s3eKeyQ = 39,
    s3eKeyR = 40,
    s3eKeyS = 41,
    s3eKeyT = 42,
    s3eKeyU = 43,
    s3eKeyV = 44,
    s3eKeyW = 45,
    s3eKeyX = 46,
    s3eKeyY = 47,
    s3eKeyZ = 48,
    s3eKeyF1 = 49,
    s3eKeyF2 = 50,
    s3eKeyF3 = 51,
    s3eKeyF4 = 52,
    s3eKeyF5 = 53,
    s3eKeyF6 = 54,
    s3eKeyF7 = 55,
    s3eKeyF8 = 56,
    s3eKeyF9 = 57,
    s3eKeyF10 = 58,
    s3eKeyNumPad0 = 59,
    s3eKeyNumPad1 = 60,
    s3eKeyNumPad2 = 61,
    s3eKeyNumPad3 = 62,
    s3eKeyNumPad4 = 63,
    s3eKeyNumPad5 = 64,
    s3eKeyNumPad6 = 65,
    s3eKeyNumPad7 = 66,
    s3eKeyNumPad8 = 67,
    s3eKeyNumPad9 = 68,
    s3eKeyNumPadPlus = 69,
    s3eKeyNumPadMinus = 70,
    s3eKeyNumPadEnter = 71,
    s3eKeyRSK = 72,
    s3eKeyLSK = 73,
    s3eKeyLS = 74,
    s3eKeyRS = 75,
    s3eKeyHash = 76,
    s3eKeyStar = 77,


    s3eKeyOk = 78,
    s3eKeyCLR = 79,


    s3eKeyVolUp = 80,
    s3eKeyVolDown = 81,
# 167 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
    s3eKeyCamera = 82,

    s3eKeyMic = 83,
    s3eKeyFn = 84,
    s3eKeySym = 85,


    s3eKeyAccept = 86,
    s3eKeyEnd = 87,
    s3eKeyHomePage = 88,

    s3eKeyButton1 = 89,
    s3eKeyButton2 = 90,
    s3eKeyButton3 = 91,
    s3eKeyButton4 = 92,
    s3eKeyButton5 = 93,
    s3eKeyButton6 = 94,
    s3eKeyButton7 = 95,
    s3eKeyButton8 = 96,

    s3eKeyF11 = 97,
    s3eKeyF12 = 98,
    s3eKeyLeftAlt = 99,

    s3eKeyRightControl = 100,
    s3eKeyRightAlt = 101,
    s3eKeyRightShift = 102,
    s3eKeyBacktick = 103,
    s3eKeyComma = 104,
    s3eKeyPeriod = 105,
    s3eKeySlash = 106,
    s3eKeyBackSlash = 107,
    s3eKeySemicolon = 108,
    s3eKeyApostrophe = 109,
    s3eKeyLeftBracket = 110,
    s3eKeyRightBracket = 111,
    s3eKeyEquals = 112,
    s3eKeyMinus = 113,
    s3eKeyCapsLock = 114,

    s3eKeyNumPadPeriod = 115,
    s3eKeyNumPadSlash = 116,
    s3eKeyNumLock = 117,
    s3eKeyInsert = 118,
    s3eKeyHome = 119,
    s3eKeyPageUp = 120,
    s3eKeyPageDown = 121,
    s3eKeyKbEnd = 122,
    s3eKeyDelete = 123,
    s3eKeyPause = 124,
    s3eKeyAt = 125,
    s3eKeyBack = 126,
    s3eKeyMenu = 127,
    s3eKeySearch = 128,
    s3eKey3DMode = 129,
    s3eKeyMyApps = 130,
    s3eKeyPrintScreen = 131,
    s3eKeyScrollLock = 132,

    s3eKeyAbsGameA = 200,
    s3eKeyAbsGameB = 201,
    s3eKeyAbsGameC = 202,
    s3eKeyAbsGameD = 203,
    s3eKeyAbsUp = 204,
    s3eKeyAbsDown = 205,
    s3eKeyAbsLeft = 206,
    s3eKeyAbsRight = 207,
    s3eKeyAbsOk = 208,
    s3eKeyAbsASK = 209,
    s3eKeyAbsBSK = 210,

    s3eKeyLeftWindows = 211,
    s3eKeyRightWindows = 212,
    s3eKeyLeftBackSlash = 213,

    s3eKeyCount = 214
} s3eKey;
# 281 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
typedef enum s3eKeyboardNumpadOrientation
{
    S3E_NUMPAD_ORIENT_NORMAL = 0,
    S3E_NUMPAD_ORIENT_ROT90 = 1,
    S3E_NUMPAD_ORIENT_ROT180 = 2,
    S3E_NUMPAD_ORIENT_ROT270 = 3
} s3eKeyboardNumpadOrientation;






typedef enum s3eKeyboardProperty
{
# 324 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_HAS_NUMPAD = 0,
# 348 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_HAS_ALPHA = 1,
# 372 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_HAS_DIRECTION = 2,






    S3E_KEYBOARD_NUMPAD_ORIENTATION = 3,
# 434 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_GET_CHAR = 4
} s3eKeyboardProperty;







typedef enum s3eKeyboardError
{
    S3E_KEYBOARD_ERR_NONE = 0,
    S3E_KEYBOARD_ERR_PARAM = 1,
    S3E_KEYBOARD_ERR_TOO_MANY = 2,
    S3E_KEYBOARD_ERR_ALREADY_REG = 3,
    S3E_KEYBOARD_ERR_NOT_FOUND = 4,
    S3E_KEYBOARD_ERR_UNAVAIL = 5,

    S3E_KEYBOARD_ERR_DEVICE = 6
} s3eKeyboardError;






typedef enum s3eKeyboardCallback
{
# 477 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_KEY_EVENT = 0,
# 492 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_CHAR_EVENT = 1,

    S3E_KEYBOARD_CALLBACK_MAX
} s3eKeyboardCallback;






typedef struct s3eKeyboardEvent
{

    s3eKey m_Key;

    uint32 m_Pressed;
} s3eKeyboardEvent;






typedef struct s3eKeyboardCharEvent
{

    s3eWChar m_Char;
} s3eKeyboardCharEvent;
# 542 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" int32 s3eKeyboardGetInt(s3eKeyboardProperty property);
# 562 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardSetInt(s3eKeyboardProperty property, int32 value);
# 590 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardRegister(s3eKeyboardCallback cbid, s3eCallback fn, void* userdata);
# 609 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardUnRegister(s3eKeyboardCallback cbid, s3eCallback fn);
# 621 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" s3eKeyboardError s3eKeyboardGetError();
# 635 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" const char* s3eKeyboardGetErrorString();







extern "C" void s3eKeyboardClearState();







extern "C" s3eResult s3eKeyboardUpdate();
# 667 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" int32 s3eKeyboardGetState(s3eKey key);






extern "C" s3eWChar s3eKeyboardGetChar();
# 685 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" s3eKey s3eKeyboardAnyKey();
# 707 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardGetDisplayName(char* dst, s3eKey key, s3eBool terminateString =(1));





# 1 "e:/program files (x86)/marmelade/7.4/s3e/h/legacy/s3eKeyboard_legacy.h" 1
# 714 "e:/program files (x86)/marmelade/7.4/s3e/h/s3eKeyboard.h" 2
# 5 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.h" 2
# 28 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.h"
class Input
{
private:

 bool zPrev_Touched;

 bool zTouched;


 int zX_Pos;
 int zY_Pos;

 bool zBackKeyPressed;
 bool zHomeKeyPressed;

private:

 void SetBackKeyStatus(bool pValue) {this->zBackKeyPressed = pValue;}
public:
 Input();






 void Update();





 void Reset();






 bool GetTouchedStatus() {return this->zTouched;}





 bool GetPrevTouchedStatus() {return this->zPrev_Touched;}






 int GetX_Position() {return this->zX_Pos;}






 int GetY_Position() {return this->zY_Pos;}





 bool GetHomeKeyStatus() {return this->zHomeKeyPressed;}





 bool GetBackKeyStatus() {return this->zBackKeyPressed;}


 static void KeyEventCallback(s3eKeyboardEvent* event);
 static void TouchButtonCB(s3ePointerEvent* event);
 static void TouchMotionCB(s3ePointerMotionEvent* event);
 static void MultiTouchButtonCB(s3ePointerTouchEvent* event);
 static void MultiTouchMotionCB(s3ePointerTouchMotionEvent* event);
};

bool FreeInput();
Input* GetInput();
bool InputInit();
# 2 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.cpp" 2

Input::Input()
{
 this->zTouched = false;
 this->zPrev_Touched = false;

 this->zBackKeyPressed = false;
 this->zHomeKeyPressed = false;


 if(s3ePointerGetInt(S3E_POINTER_MULTI_TOUCH_AVAILABLE) != 0)
 {
  s3ePointerRegister(S3E_POINTER_TOUCH_EVENT, (s3eCallback)MultiTouchButtonCB, 0);
  s3ePointerRegister(S3E_POINTER_TOUCH_MOTION_EVENT, (s3eCallback)MultiTouchMotionCB, 0);
 }
 else
 {
  s3ePointerRegister(S3E_POINTER_BUTTON_EVENT, (s3eCallback)TouchButtonCB, 0);
  s3ePointerRegister(S3E_POINTER_MOTION_EVENT, (s3eCallback)TouchMotionCB, 0);
 }

 s3eKeyboardRegister(S3E_KEYBOARD_KEY_EVENT, (s3eCallback) KeyEventCallback, __null);
}

void Input::Update()
{
 s3ePointerUpdate();

 s3eKeyboardUpdate();


 if(s3eKeyboardGetState(s3eKeyBack) & (1 << 1))
 {
  GetInput()->SetBackKeyStatus(true);
 }
}

void Input::Reset()
{
 this->zPrev_Touched = false;
 this->zTouched = false;

 GetInput()->SetBackKeyStatus(false);
}
# 54 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.cpp"
void Input::TouchButtonCB( s3ePointerEvent* event )
{
 GetInput()->zPrev_Touched = GetInput()->zTouched;
 GetInput()->zTouched = event->m_Pressed != 0;
 GetInput()->zX_Pos = event->m_x;
 GetInput()->zY_Pos = event->m_y;
}
# 69 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.cpp"
void Input::TouchMotionCB( s3ePointerMotionEvent* event )
{
 GetInput()->zX_Pos = event->m_x;
 GetInput()->zY_Pos = event->m_y;
}
# 82 "e:/Documents/GitHub/Marmelade/Mastermind/source/Input.cpp"
void Input::MultiTouchButtonCB( s3ePointerTouchEvent* event )
{
 GetInput()->zPrev_Touched = GetInput()->zTouched;
 GetInput()->zTouched = event->m_Pressed != 0;
 GetInput()->zX_Pos = event->m_x;
 GetInput()->zY_Pos = event->m_y;
}

void Input::MultiTouchMotionCB( s3ePointerTouchMotionEvent* event )
{
 GetInput()->zX_Pos = event->m_x;
 GetInput()->zX_Pos = event->m_y;
}

void Input::KeyEventCallback( s3eKeyboardEvent* event )
{
 int32 homeKeyState = s3eKeyboardGetState(s3eKeyHome);
 int32 escKeyState = s3eKeyboardGetState(s3eKeyEsc);
 if(homeKeyState & (1 << 1) || escKeyState & (1 << 1))
 {
  GetInput()->zHomeKeyPressed = true;
 }
 else if(homeKeyState & (1 << 2) || escKeyState & (1 << 2))
 {
  GetInput()->zHomeKeyPressed = false;
 }

 if(homeKeyState & (1 << 0) || escKeyState & (1 << 0))
 {
  GetInput()->zHomeKeyPressed = true;
 }
 else if(homeKeyState & 0 || escKeyState & 0)
 {
  GetInput()->zBackKeyPressed = false;
 }
}

namespace
{
 static Input* input = 0;
}

bool InputInit()
{
 if(input)
  delete input;

 input = new Input();

 return input != 0;
}

Input* GetInput()
{
 if(!input)
  return 0;

 return input;
}

bool FreeInput()
{
 if ( !input )
  return false;

 delete input;
 input = 0;

 return true;
}
